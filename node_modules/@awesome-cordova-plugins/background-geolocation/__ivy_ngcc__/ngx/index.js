import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export var BackgroundGeolocationLocationCode;
(function (BackgroundGeolocationLocationCode) {
    BackgroundGeolocationLocationCode[BackgroundGeolocationLocationCode["PERMISSION_DENIED"] = 1] = "PERMISSION_DENIED";
    BackgroundGeolocationLocationCode[BackgroundGeolocationLocationCode["LOCATION_UNAVAILABLE"] = 2] = "LOCATION_UNAVAILABLE";
    BackgroundGeolocationLocationCode[BackgroundGeolocationLocationCode["TIMEOUT"] = 3] = "TIMEOUT";
})(BackgroundGeolocationLocationCode || (BackgroundGeolocationLocationCode = {}));
export var BackgroundGeolocationNativeProvider;
(function (BackgroundGeolocationNativeProvider) {
    BackgroundGeolocationNativeProvider["gps"] = "gps";
    BackgroundGeolocationNativeProvider["network"] = "network";
    BackgroundGeolocationNativeProvider["passive"] = "passive";
    BackgroundGeolocationNativeProvider["fused"] = "fused";
})(BackgroundGeolocationNativeProvider || (BackgroundGeolocationNativeProvider = {}));
export var BackgroundGeolocationLocationProvider;
(function (BackgroundGeolocationLocationProvider) {
    BackgroundGeolocationLocationProvider[BackgroundGeolocationLocationProvider["DISTANCE_FILTER_PROVIDER"] = 0] = "DISTANCE_FILTER_PROVIDER";
    BackgroundGeolocationLocationProvider[BackgroundGeolocationLocationProvider["ACTIVITY_PROVIDER"] = 1] = "ACTIVITY_PROVIDER";
    BackgroundGeolocationLocationProvider[BackgroundGeolocationLocationProvider["RAW_PROVIDER"] = 2] = "RAW_PROVIDER";
})(BackgroundGeolocationLocationProvider || (BackgroundGeolocationLocationProvider = {}));
export var BackgroundGeolocationEvents;
(function (BackgroundGeolocationEvents) {
    BackgroundGeolocationEvents["http_authorization"] = "http_authorization";
    BackgroundGeolocationEvents["abort_requested"] = "abort_requested";
    BackgroundGeolocationEvents["background"] = "background";
    BackgroundGeolocationEvents["foreground"] = "foreground";
    BackgroundGeolocationEvents["authorization"] = "authorization";
    BackgroundGeolocationEvents["error"] = "error";
    BackgroundGeolocationEvents["stop"] = "stop";
    BackgroundGeolocationEvents["start"] = "start";
    BackgroundGeolocationEvents["activity"] = "activity";
    BackgroundGeolocationEvents["stationary"] = "stationary";
    BackgroundGeolocationEvents["location"] = "location";
})(BackgroundGeolocationEvents || (BackgroundGeolocationEvents = {}));
export var BackgroundGeolocationAuthorizationStatus;
(function (BackgroundGeolocationAuthorizationStatus) {
    BackgroundGeolocationAuthorizationStatus[BackgroundGeolocationAuthorizationStatus["NOT_AUTHORIZED"] = 0] = "NOT_AUTHORIZED";
    BackgroundGeolocationAuthorizationStatus[BackgroundGeolocationAuthorizationStatus["AUTHORIZED"] = 1] = "AUTHORIZED";
    BackgroundGeolocationAuthorizationStatus[BackgroundGeolocationAuthorizationStatus["AUTHORIZED_FOREGROUND"] = 2] = "AUTHORIZED_FOREGROUND";
})(BackgroundGeolocationAuthorizationStatus || (BackgroundGeolocationAuthorizationStatus = {}));
export var BackgroundGeolocationLogLevel;
(function (BackgroundGeolocationLogLevel) {
    BackgroundGeolocationLogLevel["TRACE"] = "TRACE";
    BackgroundGeolocationLogLevel["DEBUG"] = "DEBUG";
    BackgroundGeolocationLogLevel["INFO"] = "INFO";
    BackgroundGeolocationLogLevel["WARN"] = "WARN";
    BackgroundGeolocationLogLevel["ERROR"] = "ERROR";
})(BackgroundGeolocationLogLevel || (BackgroundGeolocationLogLevel = {}));
var BackgroundGeolocation = /** @class */ (function (_super) {
    __extends(BackgroundGeolocation, _super);
    function BackgroundGeolocation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundGeolocation.prototype.configure = function (options) { return cordova(this, "configure", {}, arguments); };
    BackgroundGeolocation.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundGeolocation.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundGeolocation.prototype.finish = function () { return cordova(this, "finish", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocation.prototype.changePace = function (isMoving) { return cordova(this, "changePace", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocation.prototype.setConfig = function (options) { return cordova(this, "setConfig", { "callbackOrder": "reverse" }, arguments); };
    BackgroundGeolocation.prototype.getStationaryLocation = function () { return cordova(this, "getStationaryLocation", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocation.prototype.onStationary = function () { return cordova(this, "onStationary", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocation.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocation.prototype.showAppSettings = function () { return cordova(this, "showAppSettings", { "sync": true }, arguments); };
    BackgroundGeolocation.prototype.showLocationSettings = function () { return cordova(this, "showLocationSettings", { "sync": true }, arguments); };
    BackgroundGeolocation.prototype.watchLocationMode = function () { return cordova(this, "watchLocationMode", { "platforms": ["Android"], "observable": true }, arguments); };
    BackgroundGeolocation.prototype.stopWatchingLocationMode = function () { return cordova(this, "stopWatchingLocationMode", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocation.prototype.getLocations = function () { return cordova(this, "getLocations", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocation.prototype.getValidLocations = function () { return cordova(this, "getValidLocations", {}, arguments); };
    BackgroundGeolocation.prototype.deleteLocation = function (locationId) { return cordova(this, "deleteLocation", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocation.prototype.deleteAllLocations = function () { return cordova(this, "deleteAllLocations", { "platforms": ["Android"] }, arguments); };
    BackgroundGeolocation.prototype.switchMode = function (modeId) { return cordova(this, "switchMode", { "platforms": ["iOS"] }, arguments); };
    BackgroundGeolocation.prototype.getLogEntries = function (limit, fromId, minLevel) { return cordova(this, "getLogEntries", {}, arguments); };
    BackgroundGeolocation.prototype.getConfig = function () { return cordova(this, "getConfig", {}, arguments); };
    BackgroundGeolocation.prototype.getCurrentLocation = function (options) { return cordova(this, "getCurrentLocation", { "callbackOrder": "reverse" }, arguments); };
    BackgroundGeolocation.prototype.checkStatus = function () { return cordova(this, "checkStatus", {}, arguments); };
    BackgroundGeolocation.prototype.startTask = function () { return cordova(this, "startTask", { "platforms": ["IOS"] }, arguments); };
    BackgroundGeolocation.prototype.endTask = function (taskKey) { return cordova(this, "endTask", { "platforms": ["IOS"] }, arguments); };
    BackgroundGeolocation.prototype.headlessTask = function (func) { return cordova(this, "headlessTask", {}, arguments); };
    BackgroundGeolocation.prototype.forceSync = function () { return cordova(this, "forceSync", {}, arguments); };
    BackgroundGeolocation.prototype.on = function (event) { return cordova(this, "on", { "observable": true }, arguments); };
    BackgroundGeolocation.prototype.removeAllListeners = function (event) { return cordova(this, "removeAllListeners", {}, arguments); };
    BackgroundGeolocation.pluginName = "BackgroundGeolocation";
    BackgroundGeolocation.plugin = "@mauron85/cordova-plugin-background-geolocation";
    BackgroundGeolocation.pluginRef = "BackgroundGeolocation";
    BackgroundGeolocation.repo = "https://github.com/mauron85/cordova-plugin-background-geolocation";
    BackgroundGeolocation.platforms = ["Android", "iOS"];
BackgroundGeolocation.ɵfac = function BackgroundGeolocation_Factory(t) { return ɵBackgroundGeolocation_BaseFactory(t || BackgroundGeolocation); };
BackgroundGeolocation.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BackgroundGeolocation, factory: function (t) { return BackgroundGeolocation.ɵfac(t); } });
var ɵBackgroundGeolocation_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BackgroundGeolocation);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BackgroundGeolocation, [{
        type: Injectable
    }], null, null); })();
    return BackgroundGeolocation;
}(AwesomeCordovaNativePlugin));
export { BackgroundGeolocation };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,