import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface SQLiteDatabaseConfig {
    /**
     * Name of the database. Example: 'my.db'
     */
    name: string;
    /**
     * Location of the database. Example: 'default'
     */
    location?: string;
    /**
     * iOS Database Location. Example: 'Library'
     */
    iosDatabaseLocation?: string;
    /**
     * support opening pre-filled databases with https://github.com/litehelpers/cordova-sqlite-ext
     */
    createFromLocation?: number;
    /**
     * support encrypted databases with https://github.com/litehelpers/Cordova-sqlcipher-adapter
     */
    key?: string;
}
/**
 * @hidden
 */
export interface DbTransaction {
    executeSql: (sql: any, values?: any[], success?: Function, error?: Function) => void;
}
/**
 * @hidden
 */
export interface SQLiteTransaction extends DbTransaction {
    start: () => void;
    addStatement: DbTransaction['executeSql'];
    handleStatementSuccess: (handler: Function, response: any) => void;
    handleStatementFailure: (handler: Function, response: any) => void;
    run: () => void;
    abort: (txFailure: any) => void;
    finish: () => void;
    abortFromQ: (sqlerror: any) => void;
}
/**
 * @hidden
 */
export declare class SQLiteObject {
    _objectInstance: any;
    constructor(_objectInstance: any);
    databaseFeatures: {
        isSQLitePluginDatabase: boolean;
    };
    openDBs: any;
    addTransaction(transaction: (tx: SQLiteTransaction) => void): void;
    /**
     * @param fn {Function}
     * @returns {Promise<any>}
     */
    transaction(fn: (tx: DbTransaction) => void): Promise<any>;
    /**
     * @param fn {Function}
     * @returns {Promise<any>}
     */
    readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any>;
    startNextTransaction(): void;
    /**
     * @returns {Promise<any>}
     */
    open(): Promise<any>;
    /**
     * @returns {Promise<any>}
     */
    close(): Promise<any>;
    /**
     * Execute SQL on the opened database. Note, you must call `create` first, and
     * ensure it resolved and successfully opened the database.
     */
    executeSql(statement: string, params?: any[]): Promise<any>;
    /**
     * @param sqlStatements {string[] | string[][] | any[]}
     * @returns {Promise<any>}
     */
    sqlBatch(sqlStatements: (string | string[] | any)[]): Promise<any>;
    abortallPendingTransactions(): void;
}
/**
 * @name SQLite
 *
 * @description
 * Access SQLite databases on the device.
 *
 * @usage
 *
 * ```typescript
 * import { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';
 *
 * constructor(private sqlite: SQLite) { }
 *
 * ...
 *
 * this.sqlite.create({
 *   name: 'data.db',
 *   location: 'default'
 * })
 *   .then((db: SQLiteObject) => {
 *
 *
 *     db.executeSql('create table danceMoves(name VARCHAR(32))', [])
 *       .then(() => console.log('Executed SQL'))
 *       .catch(e => console.log(e));
 *
 *
 *   })
 *   .catch(e => console.log(e));
 *
 * ```
 *
 * @classes
 * SQLiteObject
 * @interfaces
 * SQLiteDatabaseConfig
 * SQLiteTransaction
 */
export declare class SQLite extends IonicNativePlugin {
    /**
     * Open or create a SQLite database file.
     *
     * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database
     *
     * @param config {SQLiteDatabaseConfig} database configuration
     * @return Promise<SQLiteObject>
     */
    create(config: SQLiteDatabaseConfig): Promise<SQLiteObject>;
    /**
     * Verify that both the Javascript and native part of this plugin are installed in your application
     * @returns {Promise<any>}
     */
    echoTest(): Promise<any>;
    /**
     * Automatically verify basic database access operations including opening a database
     * @returns {Promise<any>}
     */
    selfTest(): Promise<any>;
    /**
     * Deletes a database
     * @param config {SQLiteDatabaseConfig} database configuration
     * @returns {Promise<any>}
     */
    deleteDatabase(config: SQLiteDatabaseConfig): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SQLite, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SQLite>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuZXhwb3J0IGludGVyZmFjZSBTUUxpdGVEYXRhYmFzZUNvbmZpZyB7XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgZGF0YWJhc2UuIEV4YW1wbGU6ICdteS5kYidcbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTG9jYXRpb24gb2YgdGhlIGRhdGFiYXNlLiBFeGFtcGxlOiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBsb2NhdGlvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBpT1MgRGF0YWJhc2UgTG9jYXRpb24uIEV4YW1wbGU6ICdMaWJyYXJ5J1xuICAgICAqL1xuICAgIGlvc0RhdGFiYXNlTG9jYXRpb24/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogc3VwcG9ydCBvcGVuaW5nIHByZS1maWxsZWQgZGF0YWJhc2VzIHdpdGggaHR0cHM6Ly9naXRodWIuY29tL2xpdGVoZWxwZXJzL2NvcmRvdmEtc3FsaXRlLWV4dFxuICAgICAqL1xuICAgIGNyZWF0ZUZyb21Mb2NhdGlvbj86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBzdXBwb3J0IGVuY3J5cHRlZCBkYXRhYmFzZXMgd2l0aCBodHRwczovL2dpdGh1Yi5jb20vbGl0ZWhlbHBlcnMvQ29yZG92YS1zcWxjaXBoZXItYWRhcHRlclxuICAgICAqL1xuICAgIGtleT86IHN0cmluZztcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIERiVHJhbnNhY3Rpb24ge1xuICAgIGV4ZWN1dGVTcWw6IChzcWw6IGFueSwgdmFsdWVzPzogYW55W10sIHN1Y2Nlc3M/OiBGdW5jdGlvbiwgZXJyb3I/OiBGdW5jdGlvbikgPT4gdm9pZDtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNRTGl0ZVRyYW5zYWN0aW9uIGV4dGVuZHMgRGJUcmFuc2FjdGlvbiB7XG4gICAgc3RhcnQ6ICgpID0+IHZvaWQ7XG4gICAgYWRkU3RhdGVtZW50OiBEYlRyYW5zYWN0aW9uWydleGVjdXRlU3FsJ107XG4gICAgaGFuZGxlU3RhdGVtZW50U3VjY2VzczogKGhhbmRsZXI6IEZ1bmN0aW9uLCByZXNwb25zZTogYW55KSA9PiB2b2lkO1xuICAgIGhhbmRsZVN0YXRlbWVudEZhaWx1cmU6IChoYW5kbGVyOiBGdW5jdGlvbiwgcmVzcG9uc2U6IGFueSkgPT4gdm9pZDtcbiAgICBydW46ICgpID0+IHZvaWQ7XG4gICAgYWJvcnQ6ICh0eEZhaWx1cmU6IGFueSkgPT4gdm9pZDtcbiAgICBmaW5pc2g6ICgpID0+IHZvaWQ7XG4gICAgYWJvcnRGcm9tUTogKHNxbGVycm9yOiBhbnkpID0+IHZvaWQ7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU1FMaXRlT2JqZWN0IHtcbiAgICBfb2JqZWN0SW5zdGFuY2U6IGFueTtcbiAgICBjb25zdHJ1Y3Rvcihfb2JqZWN0SW5zdGFuY2U6IGFueSk7XG4gICAgZGF0YWJhc2VGZWF0dXJlczoge1xuICAgICAgICBpc1NRTGl0ZVBsdWdpbkRhdGFiYXNlOiBib29sZWFuO1xuICAgIH07XG4gICAgb3BlbkRCczogYW55O1xuICAgIGFkZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uOiAodHg6IFNRTGl0ZVRyYW5zYWN0aW9uKSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZm4ge0Z1bmN0aW9ufVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgdHJhbnNhY3Rpb24oZm46ICh0eDogRGJUcmFuc2FjdGlvbikgPT4gdm9pZCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZm4ge0Z1bmN0aW9ufVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgcmVhZFRyYW5zYWN0aW9uKGZuOiAodHg6IFNRTGl0ZVRyYW5zYWN0aW9uKSA9PiB2b2lkKTogUHJvbWlzZTxhbnk+O1xuICAgIHN0YXJ0TmV4dFRyYW5zYWN0aW9uKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBvcGVuKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIGNsb3NlKCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIFNRTCBvbiB0aGUgb3BlbmVkIGRhdGFiYXNlLiBOb3RlLCB5b3UgbXVzdCBjYWxsIGBjcmVhdGVgIGZpcnN0LCBhbmRcbiAgICAgKiBlbnN1cmUgaXQgcmVzb2x2ZWQgYW5kIHN1Y2Nlc3NmdWxseSBvcGVuZWQgdGhlIGRhdGFiYXNlLlxuICAgICAqL1xuICAgIGV4ZWN1dGVTcWwoc3RhdGVtZW50OiBzdHJpbmcsIHBhcmFtcz86IGFueVtdKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzcWxTdGF0ZW1lbnRzIHtzdHJpbmdbXSB8IHN0cmluZ1tdW10gfCBhbnlbXX1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHNxbEJhdGNoKHNxbFN0YXRlbWVudHM6IChzdHJpbmcgfCBzdHJpbmdbXSB8IGFueSlbXSk6IFByb21pc2U8YW55PjtcbiAgICBhYm9ydGFsbFBlbmRpbmdUcmFuc2FjdGlvbnMoKTogdm9pZDtcbn1cbi8qKlxuICogQG5hbWUgU1FMaXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBY2Nlc3MgU1FMaXRlIGRhdGFiYXNlcyBvbiB0aGUgZGV2aWNlLlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNRTGl0ZSwgU1FMaXRlT2JqZWN0IH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zcWxpdGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNxbGl0ZTogU1FMaXRlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnNxbGl0ZS5jcmVhdGUoe1xuICogICBuYW1lOiAnZGF0YS5kYicsXG4gKiAgIGxvY2F0aW9uOiAnZGVmYXVsdCdcbiAqIH0pXG4gKiAgIC50aGVuKChkYjogU1FMaXRlT2JqZWN0KSA9PiB7XG4gKlxuICpcbiAqICAgICBkYi5leGVjdXRlU3FsKCdjcmVhdGUgdGFibGUgZGFuY2VNb3ZlcyhuYW1lIFZBUkNIQVIoMzIpKScsIFtdKVxuICogICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0V4ZWN1dGVkIFNRTCcpKVxuICogICAgICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpO1xuICpcbiAqXG4gKiAgIH0pXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAY2xhc3Nlc1xuICogU1FMaXRlT2JqZWN0XG4gKiBAaW50ZXJmYWNlc1xuICogU1FMaXRlRGF0YWJhc2VDb25maWdcbiAqIFNRTGl0ZVRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNRTGl0ZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgICAvKipcbiAgICAgKiBPcGVuIG9yIGNyZWF0ZSBhIFNRTGl0ZSBkYXRhYmFzZSBmaWxlLlxuICAgICAqXG4gICAgICogU2VlIHRoZSBwbHVnaW4gZG9jcyBmb3IgYW4gZXhwbGFuYXRpb24gb2YgYWxsIG9wdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9saXRlaGVscGVycy9Db3Jkb3ZhLXNxbGl0ZS1zdG9yYWdlI29wZW5pbmctYS1kYXRhYmFzZVxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyB7U1FMaXRlRGF0YWJhc2VDb25maWd9IGRhdGFiYXNlIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcmV0dXJuIFByb21pc2U8U1FMaXRlT2JqZWN0PlxuICAgICAqL1xuICAgIGNyZWF0ZShjb25maWc6IFNRTGl0ZURhdGFiYXNlQ29uZmlnKTogUHJvbWlzZTxTUUxpdGVPYmplY3Q+O1xuICAgIC8qKlxuICAgICAqIFZlcmlmeSB0aGF0IGJvdGggdGhlIEphdmFzY3JpcHQgYW5kIG5hdGl2ZSBwYXJ0IG9mIHRoaXMgcGx1Z2luIGFyZSBpbnN0YWxsZWQgaW4geW91ciBhcHBsaWNhdGlvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZWNob1Rlc3QoKTogUHJvbWlzZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgdmVyaWZ5IGJhc2ljIGRhdGFiYXNlIGFjY2VzcyBvcGVyYXRpb25zIGluY2x1ZGluZyBvcGVuaW5nIGEgZGF0YWJhc2VcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIHNlbGZUZXN0KCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgZGF0YWJhc2VcbiAgICAgKiBAcGFyYW0gY29uZmlnIHtTUUxpdGVEYXRhYmFzZUNvbmZpZ30gZGF0YWJhc2UgY29uZmlndXJhdGlvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgZGVsZXRlRGF0YWJhc2UoY29uZmlnOiBTUUxpdGVEYXRhYmFzZUNvbmZpZyk6IFByb21pc2U8YW55Pjtcbn1cbiJdfQ==